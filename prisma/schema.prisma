generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  role     Role
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  refreshTokens RefreshToken[] //to establish the relation between refreshTokens
  resetToken  String?  // Optional field to store the reset token
  resetTokenExpiry DateTime? // Optional field to store token expiration time
}
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tenant {
  id         String   @id @default(uuid())
  name       String   @unique
  category   String   @default("General")  // Add default value
  users      User[]
  customers  Customer[]
  inventory  Inventory[]
  taxation   Taxation[] 
  invoice    Invoice[] // Link Tenant to invoice
  createdAt     DateTime @default(now())  // Creation Timestamp
  updatedAt     DateTime @updatedAt @default(now()) // Auto-updated on changes
}

model Customer {
  id        String  @id @default(uuid())
  name      String
  email     String  
  phone     String  @default("Not Provided") // <-- Set default value
  tenantId  String
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
  invoice   Invoice[]
}

model Inventory {
  id        String  @id @default(uuid())
  name      String
  price     Float   
  stock     Int
  tenantId  String
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
  invoice   InvoiceItem[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   @default(now())// Track stock updates
}

model Taxation {
  id        String  @id @default(uuid())
  taxRate   Float
  region    String
  tenantId  String
  tenant    Tenant  @relation(fields: [tenantId], references: [id])
}

model Invoice {
  id          String    @id @default(uuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id])
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  totalPrice  Float
  totalTax    Float
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @default(now())
  items       InvoiceItem[] // Multiple products per bill

}


model InvoiceItem {
  id          String    @id @default(uuid())
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  productId   String
  product     Inventory @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float
  totalPrice  Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())  // Track changes to purchased products
}

enum Role {
  SUPERADMIN
  ADMIN
  MANAGER
}
